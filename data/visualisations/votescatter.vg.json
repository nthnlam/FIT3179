{
  "$schema": "https://vega.github.io/schema/vega/v5.json",
  "background": "white",
  "padding": 5,
  "width": 400,
  "height": 400,
  "title": {"text": "Seat Distribution by State and Party", "frame": "group"},
  "style": "cell",
  "data": [
    {"name": "pts_store"},
    {"name": "stateHighlight_store"},
    {
      "name": "source_0",
      "url": "https://raw.githubusercontent.com/nthnlam/FIT3179/main/data/HouseFirstPrefsByStateByPartyDownload-24310.csv",
      "format": {"type": "csv", "delimiter": ","}
    },
    {
      "name": "data_0",
      "source": "source_0",
      "transform": [
        {
          "type": "formula",
          "expr": "datum.PartyNm + ', ' + datum.StateAb",
          "as": "Party"
        },
        {"type": "filter", "expr": "datum.Contested >= minContested"},
        {
          "type": "filter",
          "expr": "datum.PartyAb == partySelect || partySelect == null"
        },
        {
          "type": "filter",
          "expr": "isValid(datum[\"TotalVotes\"]) && isFinite(+datum[\"TotalVotes\"]) && isValid(datum[\"Elected\"]) && isFinite(+datum[\"Elected\"]) && isValid(datum[\"Contested\"]) && isFinite(+datum[\"Contested\"])"
        }
      ]
    },
    {
      "name": "data_1",
      "source": "source_0",
      "transform": [
        {
          "type": "filter",
          "expr": "!(length(data(\"pts_store\"))) || (vlSelectionTest(\"pts_store\", datum))"
        },
        {"type": "filter", "expr": "datum.Contested >= minContested"},
        {
          "type": "filter",
          "expr": "datum.PartyAb == partySelect || partySelect == null"
        },
        {
          "type": "aggregate",
          "groupby": [],
          "ops": ["mean", "sum", "mean", "sum"],
          "fields": ["TotalVotes", "TotalVotes", "Elected", "Contested"],
          "as": [
            "mean_TotalVotes",
            "sum_TotalVotes",
            "mean_Elected",
            "sum_Contested"
          ]
        }
      ]
    },
    {
      "name": "data_2",
      "source": "data_1",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum[\"mean_TotalVotes\"]) && isFinite(+datum[\"mean_TotalVotes\"])"
        }
      ]
    },
    {
      "name": "data_3",
      "source": "data_1",
      "transform": [
        {
          "type": "filter",
          "expr": "isValid(datum[\"mean_Elected\"]) && isFinite(+datum[\"mean_Elected\"])"
        }
      ]
    }
  ],
  "signals": [
    {
      "name": "unit",
      "value": {},
      "on": [
        {"events": "mousemove", "update": "isTuple(group()) ? group() : unit"}
      ]
    },
    {
      "name": "stateHighlight_StateAb_legend",
      "value": null,
      "on": [
        {
          "events": [
            {
              "source": "view",
              "type": "click",
              "markname": "StateAb_legend_symbols"
            },
            {
              "source": "view",
              "type": "click",
              "markname": "StateAb_legend_labels"
            },
            {
              "source": "view",
              "type": "click",
              "markname": "StateAb_legend_entries"
            }
          ],
          "update": "datum.value || item().items[0].items[0].datum.value",
          "force": true
        },
        {
          "events": [{"source": "view", "type": "click"}],
          "update": "!event.item || !datum ? null : stateHighlight_StateAb_legend",
          "force": true
        }
      ]
    },
    {"name": "pts", "update": "vlSelectionResolve(\"pts_store\", \"union\")"},
    {
      "name": "stateHighlight",
      "update": "vlSelectionResolve(\"stateHighlight_store\", \"union\", true)"
    },
    {
      "name": "minContested",
      "value": 0,
      "bind": {
        "input": "range",
        "min": 0,
        "max": 40,
        "step": 1,
        "name": "Min. Seats Contested"
      }
    },
    {
      "name": "partySelect",
      "bind": {
        "input": "select",
        "labels": [
          "Show All",
          "Liberal",
          "Liberal National Party",
          "The Nationals",
          "Country Liberals (NT)",
          "Australian Labor Party",
          "The Greens",
          "Katter's Australian Party (KAP)",
          "Centre Alliance",
          "United Australia Party",
          "Pauline Hanson's One Nation",
          "FRASER ANNING'S CONSERVATIVE NATIONAL PARTY",
          "Animal Justice Party",
          "Christian Democratic Party",
          "Sustainable Australia",
          "WESTERN AUSTRALIA PARTY",
          "Rise Up Australia Party",
          "Australian Christians",
          "Liberal Democrats (LDP)",
          "DLP - Democratic Labour Party",
          "Derryn Hinch's Justice Party",
          "Shooters, Fishers and Farmers",
          "Science Party",
          "Australian Progressives",
          "The Great Australian Party",
          "Australia First Party (NSW) Incorporated",
          "Socialist Equality Party",
          "Reason Australia",
          "Socialist Alliance",
          "Victorian Socialists",
          "Citizens Electoral Council",
          "Australian Better Families",
          "Australian Democrats",
          "Australian Workers Party",
          "Child Protection Party",
          "Involuntary Medication Objectors (Vaccination/Fluoride) Party",
          "Love Australia or Leave",
          "Non-Custodial Parents Party",
          "VOTEFLUX.ORG | Upgrade Democracy!",
          "Independent",
          "Non Affiliated"
        ],
        "options": [
          null,
          "LP",
          "LNP",
          "NP",
          "CLP",
          "ALP",
          "GRN",
          "KAP",
          "XEN",
          "UAPP",
          "ON",
          "FACN",
          "AJP",
          "CDP",
          "SPP",
          "WAP",
          "RUA",
          "AUC",
          "LDP",
          "DLP",
          "DHJP",
          "ASP",
          "FUT",
          "AUP",
          "GAP",
          "AFN",
          "SEP",
          "REAS",
          "SAL",
          "VNS",
          "CEC",
          "ABFA",
          "AUD",
          "AWP",
          "CPP",
          "IMO",
          "LAOL",
          "NCP",
          "FLUX",
          "IND",
          "NAFD"
        ],
        "name": "Select Party"
      }
    },
    {
      "name": "pts_x",
      "value": [],
      "on": [
        {
          "events": {
            "source": "scope",
            "type": "mousedown",
            "filter": ["!event.item || event.item.mark.name !== \"pts_brush\""]
          },
          "update": "[x(unit), x(unit)]"
        },
        {
          "events": {
            "source": "window",
            "type": "mousemove",
            "consume": true,
            "between": [
              {
                "source": "scope",
                "type": "mousedown",
                "filter": [
                  "!event.item || event.item.mark.name !== \"pts_brush\""
                ]
              },
              {"source": "window", "type": "mouseup"}
            ]
          },
          "update": "[pts_x[0], clamp(x(unit), 0, width)]"
        },
        {
          "events": {"signal": "pts_scale_trigger"},
          "update": "[scale(\"x\", pts_TotalVotes[0]), scale(\"x\", pts_TotalVotes[1])]"
        },
        {
          "events": {"signal": "pts_translate_delta"},
          "update": "clampRange(panLinear(pts_translate_anchor.extent_x, pts_translate_delta.x / span(pts_translate_anchor.extent_x)), 0, width)"
        },
        {
          "events": {"signal": "pts_zoom_delta"},
          "update": "clampRange(zoomLinear(pts_x, pts_zoom_anchor.x, pts_zoom_delta), 0, width)"
        },
        {
          "events": [{"source": "scope", "type": "dblclick"}],
          "update": "[0, 0]"
        }
      ]
    },
    {
      "name": "pts_TotalVotes",
      "on": [
        {
          "events": {"signal": "pts_x"},
          "update": "pts_x[0] === pts_x[1] ? null : invert(\"x\", pts_x)"
        }
      ]
    },
    {
      "name": "pts_y",
      "value": [],
      "on": [
        {
          "events": {
            "source": "scope",
            "type": "mousedown",
            "filter": ["!event.item || event.item.mark.name !== \"pts_brush\""]
          },
          "update": "[y(unit), y(unit)]"
        },
        {
          "events": {
            "source": "window",
            "type": "mousemove",
            "consume": true,
            "between": [
              {
                "source": "scope",
                "type": "mousedown",
                "filter": [
                  "!event.item || event.item.mark.name !== \"pts_brush\""
                ]
              },
              {"source": "window", "type": "mouseup"}
            ]
          },
          "update": "[pts_y[0], clamp(y(unit), 0, height)]"
        },
        {
          "events": {"signal": "pts_scale_trigger"},
          "update": "[scale(\"y\", pts_Elected[0]), scale(\"y\", pts_Elected[1])]"
        },
        {
          "events": {"signal": "pts_translate_delta"},
          "update": "clampRange(panLinear(pts_translate_anchor.extent_y, pts_translate_delta.y / span(pts_translate_anchor.extent_y)), 0, height)"
        },
        {
          "events": {"signal": "pts_zoom_delta"},
          "update": "clampRange(zoomLinear(pts_y, pts_zoom_anchor.y, pts_zoom_delta), 0, height)"
        },
        {
          "events": [{"source": "scope", "type": "dblclick"}],
          "update": "[0, 0]"
        }
      ]
    },
    {
      "name": "pts_Elected",
      "on": [
        {
          "events": {"signal": "pts_y"},
          "update": "pts_y[0] === pts_y[1] ? null : invert(\"y\", pts_y)"
        }
      ]
    },
    {
      "name": "pts_scale_trigger",
      "value": {},
      "on": [
        {
          "events": [{"scale": "x"}, {"scale": "y"}],
          "update": "(!isArray(pts_TotalVotes) || (+invert(\"x\", pts_x)[0] === +pts_TotalVotes[0] && +invert(\"x\", pts_x)[1] === +pts_TotalVotes[1])) && (!isArray(pts_Elected) || (+invert(\"y\", pts_y)[0] === +pts_Elected[0] && +invert(\"y\", pts_y)[1] === +pts_Elected[1])) ? pts_scale_trigger : {}"
        }
      ]
    },
    {
      "name": "pts_tuple",
      "on": [
        {
          "events": [{"signal": "pts_TotalVotes || pts_Elected"}],
          "update": "pts_TotalVotes && pts_Elected ? {unit: \"layer_0\", fields: pts_tuple_fields, values: [pts_TotalVotes,pts_Elected]} : null"
        }
      ]
    },
    {
      "name": "pts_tuple_fields",
      "value": [
        {"field": "TotalVotes", "channel": "x", "type": "R"},
        {"field": "Elected", "channel": "y", "type": "R"}
      ]
    },
    {
      "name": "pts_translate_anchor",
      "value": {},
      "on": [
        {
          "events": [
            {"source": "scope", "type": "mousedown", "markname": "pts_brush"}
          ],
          "update": "{x: x(unit), y: y(unit), extent_x: slice(pts_x), extent_y: slice(pts_y)}"
        }
      ]
    },
    {
      "name": "pts_translate_delta",
      "value": {},
      "on": [
        {
          "events": [
            {
              "source": "window",
              "type": "mousemove",
              "consume": true,
              "between": [
                {
                  "source": "scope",
                  "type": "mousedown",
                  "markname": "pts_brush"
                },
                {"source": "window", "type": "mouseup"}
              ]
            }
          ],
          "update": "{x: pts_translate_anchor.x - x(unit), y: pts_translate_anchor.y - y(unit)}"
        }
      ]
    },
    {
      "name": "pts_zoom_anchor",
      "on": [
        {
          "events": [
            {
              "source": "scope",
              "type": "wheel",
              "consume": true,
              "markname": "pts_brush"
            }
          ],
          "update": "{x: x(unit), y: y(unit)}"
        }
      ]
    },
    {
      "name": "pts_zoom_delta",
      "on": [
        {
          "events": [
            {
              "source": "scope",
              "type": "wheel",
              "consume": true,
              "markname": "pts_brush"
            }
          ],
          "force": true,
          "update": "pow(1.001, event.deltaY * pow(16, event.deltaMode))"
        }
      ]
    },
    {
      "name": "pts_modify",
      "on": [
        {
          "events": {"signal": "pts_tuple"},
          "update": "modify(\"pts_store\", pts_tuple, true)"
        }
      ]
    },
    {
      "name": "stateHighlight_tuple",
      "update": "stateHighlight_StateAb_legend !== null ? {fields: stateHighlight_tuple_fields, values: [stateHighlight_StateAb_legend]} : null"
    },
    {
      "name": "stateHighlight_tuple_fields",
      "value": [{"type": "E", "field": "StateAb"}]
    },
    {
      "name": "stateHighlight_toggle",
      "value": false,
      "on": [
        {
          "events": {"merge": [{"source": "view", "type": "click"}]},
          "update": "event.shiftKey"
        }
      ]
    },
    {
      "name": "stateHighlight_modify",
      "on": [
        {
          "events": {"signal": "stateHighlight_tuple"},
          "update": "modify(\"stateHighlight_store\", stateHighlight_toggle ? null : stateHighlight_tuple, stateHighlight_toggle ? null : true, stateHighlight_toggle ? stateHighlight_tuple : null)"
        }
      ]
    }
  ],
  "marks": [
    {
      "name": "pts_brush_bg",
      "type": "rect",
      "clip": true,
      "encode": {
        "enter": {"fill": {"value": "#333"}, "fillOpacity": {"value": 0.125}},
        "update": {
          "x": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"layer_0\"",
              "signal": "pts_x[0]"
            },
            {"value": 0}
          ],
          "y": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"layer_0\"",
              "signal": "pts_y[0]"
            },
            {"value": 0}
          ],
          "x2": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"layer_0\"",
              "signal": "pts_x[1]"
            },
            {"value": 0}
          ],
          "y2": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"layer_0\"",
              "signal": "pts_y[1]"
            },
            {"value": 0}
          ]
        }
      }
    },
    {
      "name": "layer_0_marks",
      "type": "symbol",
      "style": ["circle"],
      "interactive": true,
      "from": {"data": "data_0"},
      "encode": {
        "update": {
          "opacity": [
            {
              "test": "!(length(data(\"stateHighlight_store\"))) || (vlSelectionTest(\"stateHighlight_store\", datum))",
              "value": 0.8
            },
            {"value": 0.1}
          ],
          "fill": {"scale": "color", "field": "StateAb"},
          "tooltip": {
            "signal": "{\"Party\": isValid(datum[\"Party\"]) ? datum[\"Party\"] : \"\"+datum[\"Party\"], \"Seats Contested\": format(datum[\"Contested\"], \"\"), \"Seats Elected\": format(datum[\"Elected\"], \"\")}"
          },
          "ariaRoleDescription": {"value": "circle"},
          "description": {
            "signal": "\"TotalVotes: \" + (format(datum[\"TotalVotes\"], \"\")) + \"; Elected: \" + (format(datum[\"Elected\"], \"\")) + \"; State: \" + (isValid(datum[\"StateAb\"]) ? datum[\"StateAb\"] : \"\"+datum[\"StateAb\"]) + \"; Seats Contested: \" + (format(datum[\"Contested\"], \"\")) + \"; Party: \" + (isValid(datum[\"Party\"]) ? datum[\"Party\"] : \"\"+datum[\"Party\"]) + \"; Seats Elected: \" + (format(datum[\"Elected\"], \"\"))"
          },
          "x": {"scale": "x", "field": "TotalVotes"},
          "y": {"scale": "y", "field": "Elected"},
          "size": {"scale": "size", "field": "Contested"},
          "shape": {"value": "circle"}
        }
      }
    },
    {
      "name": "layer_1_marks",
      "type": "rule",
      "style": ["rule"],
      "interactive": true,
      "from": {"data": "data_3"},
      "encode": {
        "update": {
          "stroke": {"value": "red"},
          "tooltip": {
            "signal": "{\"Mean of Seats Won\": format(datum[\"mean_Elected\"], \",.2f\"), \"Sum of Seats Contested\": format(datum[\"sum_Contested\"], \",.2f\")}"
          },
          "description": {
            "signal": "\"Number of Seats: \" + (format(datum[\"mean_Elected\"], \"\")) + \"; Mean of Seats Won: \" + (format(datum[\"mean_Elected\"], \",.2f\")) + \"; Sum of Seats Contested: \" + (format(datum[\"sum_Contested\"], \",.2f\"))"
          },
          "x": {"field": {"group": "width"}},
          "x2": {"value": 0},
          "y": {"scale": "y", "field": "mean_Elected"},
          "strokeWidth": {"value": 3}
        }
      }
    },
    {
      "name": "layer_2_marks",
      "type": "rule",
      "style": ["rule"],
      "interactive": true,
      "from": {"data": "data_2"},
      "encode": {
        "update": {
          "stroke": {"value": "red"},
          "tooltip": {
            "signal": "{\"Mean of Total First Preference Votes\": format(datum[\"mean_TotalVotes\"], \",.2f\"), \"Sum of First Preference Votes\": format(datum[\"sum_TotalVotes\"], \",.2f\")}"
          },
          "description": {
            "signal": "\"Total First Preference Votes: \" + (format(datum[\"mean_TotalVotes\"], \"\")) + \"; Mean of Total First Preference Votes: \" + (format(datum[\"mean_TotalVotes\"], \",.2f\")) + \"; Sum of First Preference Votes: \" + (format(datum[\"sum_TotalVotes\"], \",.2f\"))"
          },
          "x": {"scale": "x", "field": "mean_TotalVotes"},
          "y": {"value": 0},
          "y2": {"field": {"group": "height"}},
          "strokeWidth": {"value": 3}
        }
      }
    },
    {
      "name": "pts_brush",
      "type": "rect",
      "clip": true,
      "encode": {
        "enter": {"fill": {"value": "transparent"}},
        "update": {
          "x": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"layer_0\"",
              "signal": "pts_x[0]"
            },
            {"value": 0}
          ],
          "y": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"layer_0\"",
              "signal": "pts_y[0]"
            },
            {"value": 0}
          ],
          "x2": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"layer_0\"",
              "signal": "pts_x[1]"
            },
            {"value": 0}
          ],
          "y2": [
            {
              "test": "data(\"pts_store\").length && data(\"pts_store\")[0].unit === \"layer_0\"",
              "signal": "pts_y[1]"
            },
            {"value": 0}
          ],
          "stroke": [
            {
              "test": "pts_x[0] !== pts_x[1] && pts_y[0] !== pts_y[1]",
              "value": "white"
            },
            {"value": null}
          ]
        }
      }
    }
  ],
  "scales": [
    {
      "name": "x",
      "type": "linear",
      "domain": [-1, 2000000],
      "range": [0, {"signal": "width"}],
      "nice": true,
      "zero": true
    },
    {
      "name": "y",
      "type": "linear",
      "domain": [-1, 25],
      "range": [{"signal": "height"}, 0],
      "nice": true,
      "zero": true
    },
    {
      "name": "color",
      "type": "ordinal",
      "domain": ["ACT", "NSW", "NT", "QLD", "SA", "TAS", "VIC", "WA"],
      "range": [
        "#e41a1c",
        "#377eb8",
        "#4daf4a",
        "#984ea3",
        "#ff7f00",
        "#ffff33",
        "#dd1c77",
        "#fcbba1"
      ]
    },
    {
      "name": "size",
      "type": "threshold",
      "domain": [10, 20, 30, 40],
      "range": {
        "signal": "sequence(9, 361 + (361 - 9) / (5 - 1), (361 - 9) / (5 - 1))"
      }
    }
  ],
  "axes": [
    {
      "scale": "x",
      "orient": "bottom",
      "gridScale": "y",
      "grid": true,
      "tickCount": {"signal": "ceil(width/40)"},
      "domain": false,
      "labels": false,
      "aria": false,
      "maxExtent": 0,
      "minExtent": 0,
      "ticks": false,
      "zindex": 0
    },
    {
      "scale": "y",
      "orient": "left",
      "gridScale": "x",
      "grid": true,
      "tickCount": {"signal": "ceil(height/40)"},
      "domain": false,
      "labels": false,
      "aria": false,
      "maxExtent": 0,
      "minExtent": 0,
      "ticks": false,
      "zindex": 0
    },
    {
      "scale": "x",
      "orient": "bottom",
      "grid": false,
      "title": "Total First Preference Votes",
      "labelFlush": true,
      "labelOverlap": true,
      "tickCount": {"signal": "ceil(width/40)"},
      "zindex": 0
    },
    {
      "scale": "y",
      "orient": "left",
      "grid": false,
      "title": "Number of Seats",
      "labelOverlap": true,
      "tickCount": {"signal": "ceil(height/40)"},
      "zindex": 0
    }
  ],
  "legends": [
    {
      "title": "State",
      "fill": "color",
      "symbolType": "circle",
      "encode": {
        "labels": {
          "name": "StateAb_legend_labels",
          "interactive": true,
          "update": {
            "opacity": [
              {
                "test": "(!length(data(\"stateHighlight_store\")) || (stateHighlight[\"StateAb\"] && indexof(stateHighlight[\"StateAb\"], datum.value) >= 0))",
                "value": 1
              },
              {"value": 0.35}
            ]
          }
        },
        "symbols": {
          "name": "StateAb_legend_symbols",
          "interactive": true,
          "update": {
            "opacity": [
              {
                "test": "(!length(data(\"stateHighlight_store\")) || (stateHighlight[\"StateAb\"] && indexof(stateHighlight[\"StateAb\"], datum.value) >= 0))",
                "value": 0.8
              },
              {"value": 0.35}
            ]
          }
        },
        "entries": {
          "name": "StateAb_legend_entries",
          "interactive": true,
          "update": {"fill": {"value": "transparent"}}
        }
      }
    },
    {
      "title": "Seats Contested",
      "size": "size",
      "labelOverlap": "greedy",
      "symbolType": "circle",
      "encode": {
        "symbols": {
          "update": {
            "fill": {"value": "black"},
            "fillOpacity": {"value": 0.8},
            "opacity": {"value": 0.8},
            "stroke": {"value": "transparent"}
          }
        }
      }
    }
  ],
  "config": {}
}